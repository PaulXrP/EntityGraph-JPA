spring.application.name=spring-hibernate-props

#spring.config.import=optional:classpath:secrets.properties
#
#spring.datasource.url=jdbc:mysql://localhost:3306/entity_graph_jpa
#spring.datasource.username=${DB_USERNAME}
#spring.datasource.password=${DB_PASSWORD}
#
#spring.jpa.show-sql=true
#spring.jpa.hibernate.ddl-auto=update
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect

# H2 DB config
#spring.datasource.driver-class-name=org.h2.Driver
#spring.datasource.url=jdbc:h2:mem:entity_graph_db;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE;webAllowOthers=true

#Because in-memory H2 DBs exist only within the process that created them.
#Docker runs your app in a containerized process ‚Äî so any external access (even from your host) won‚Äôt reach that in-memory DB.
#Switch from in-memory to file-based H2 database, so Docker and browser can access it:


#spring.datasource.url=jdbc:h2:file:/data/demo-db;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE;AUTO_SERVER=TRUE
#spring.datasource.username=sa
#spring.datasource.password=

# Use TCP server mode (connectable via JDBC)
#spring.datasource.driver-class-name=org.h2.Driver
spring.datasource.url=jdbc:h2:file:/data/demo-db;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
spring.datasource.username=sa
spring.datasource.password=

# Hibernate dialect for H2
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

# Hibernate DDL strategy
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true

# Enable H2 console
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console
spring.h2.console.settings.web-allow-others=true

#spring.jpa.open-in-view=false
#üîç This forces all lazy-loaded data to be fetched before rendering the view or sending API response. \
#  Useful to fail fast if you forgot a join or entity graph.

